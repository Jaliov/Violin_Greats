require("dotenv").config();const express=require("express"),mongoose=require("mongoose"),path=require("path"),{body:body,validationResult:validationResult}=require("express-validator");var port=process.env.PORT||3e3,bodyParser=require("body-parser");const app=express();app.use(express.static(__dirname)),app.use(express.urlencoded({extended:!0})),mongoose.connect(process.env.MONGO_URI);const db=mongoose.connection;db.on("error",(error=>{console.error("MongoDB connection error:",error)})),db.once("open",(()=>{console.log("Mongodb connection is a go!")}));const userSchema=new mongoose.Schema({name:String,email:String,comments:String}),Users=mongoose.model("data",userSchema);app.get("/",((req,res)=>{res.sendFile(path.join(__dirname," ../index.html"))})),app.post("/post",(async(req,res)=>{body("name").isAlphanumeric().trim().escape();const{name:name,email:email,comments:comments}=req.body,user=new Users({name:name,email:email,comments:comments});router.post("/post",loginValidator,((req,res,next)=>{const errors=validationResult(req);if(errors.isEmpty())return res.status(200).json();res.status(422).json({errors:errors.array()})})),app.use(((err,res)=>{console.error(err.stack),res.status(500).send("Something went wrong!")})),console.log(user),res.redirect("signup_success.html")})),app.listen(port,(()=>{console.log("Server started port : "+port)}));